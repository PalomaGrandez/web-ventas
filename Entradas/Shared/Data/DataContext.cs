// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Entradas.Shared.Models;
namespace Entradas.Shared.Data

{
    public partial class DataContext : DbContext
    {
        public DataContext()
        {
        }

        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Banner> Banner { get; set; }
        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Evento> Evento { get; set; }
        public virtual DbSet<EventoEntrada> EventoEntrada { get; set; }
        public virtual DbSet<EventoFecha> EventoFecha { get; set; }
        public virtual DbSet<Orden> Orden { get; set; }
        public virtual DbSet<OrdenDetalle> OrdenDetalle { get; set; }
        public virtual DbSet<OrdenTicket> OrdenTicket { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<VwOrden> VwOrden { get; set; }
        public virtual DbSet<VwOrdenTicket> VwOrdenTicket { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Banner>(entity =>
            {
                entity.ToTable("Banner", "Entradas");

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Categoria>(entity =>
            {
                entity.ToTable("Categoria", "Entradas");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Evento>(entity =>
            {
                entity.ToTable("Evento", "Entradas");

                entity.Property(e => e.CapacidadTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Imagen).IsUnicode(false);

                entity.Property(e => e.Informacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Ubicacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.Categoria)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.CategoriaId)
                    .HasConstraintName("FK_Evento_Categoria");
            });

            modelBuilder.Entity<EventoEntrada>(entity =>
            {
                entity.ToTable("EventoEntrada", "Entradas");

                entity.Property(e => e.FechaVigenciaDescuento).HasColumnType("datetime");

                entity.Property(e => e.PrecioDescuento).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioRegular).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Evento)
                    .WithMany(p => p.EventoEntrada)
                    .HasForeignKey(d => d.EventoId)
                    .HasConstraintName("FK_EventoEntrada_Evento");
            });

            modelBuilder.Entity<EventoFecha>(entity =>
            {
                entity.ToTable("EventoFecha", "Entradas");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.HasOne(d => d.Evento)
                    .WithMany(p => p.EventoFecha)
                    .HasForeignKey(d => d.EventoId)
                    .HasConstraintName("FK_EventoFecha_Evento");
            });

            modelBuilder.Entity<Orden>(entity =>
            {
                entity.ToTable("Orden", "Entradas");

                entity.Property(e => e.Estado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MedioPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroOperacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioTotal).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.Orden)
                    .HasForeignKey(d => d.UsuarioId)
                    .HasConstraintName("FK_Orden_Usuario");
            });

            modelBuilder.Entity<OrdenDetalle>(entity =>
            {
                entity.HasKey(e => new { e.OrdenId, e.EventoId, e.EventoEntradaId, e.EventoFechaId });

                entity.ToTable("OrdenDetalle", "Entradas");

                entity.Property(e => e.PrecioTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EventoEntrada)
                    .WithMany(p => p.OrdenDetalle)
                    .HasForeignKey(d => d.EventoEntradaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenDetalle_EventoEntrada");

                entity.HasOne(d => d.EventoFecha)
                    .WithMany(p => p.OrdenDetalle)
                    .HasForeignKey(d => d.EventoFechaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenDetalle_EventoFecha");

                entity.HasOne(d => d.Evento)
                    .WithMany(p => p.OrdenDetalle)
                    .HasForeignKey(d => d.EventoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenDetalle_Evento");

                entity.HasOne(d => d.Orden)
                    .WithMany(p => p.OrdenDetalle)
                    .HasForeignKey(d => d.OrdenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenDetalle_Orden");
            });

            modelBuilder.Entity<OrdenTicket>(entity =>
            {
                entity.ToTable("OrdenTicket", "Entradas");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.ToTable("Usuario", "Entradas");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreUsuario)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rol)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwOrden>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Orden", "Entradas");

                entity.Property(e => e.Evento)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.PrecioTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoEntrada)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

           


            modelBuilder.Entity<VwOrdenTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_OrdenTicket", "Entradas");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Evento)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}