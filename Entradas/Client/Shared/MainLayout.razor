@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IEventoService EventoService


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Style="height: 75px; background-color: #002448;">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />

        <MudImage Src="icons/mago.png" Height="50" Width="50" onclick="@Home" Style="cursor: pointer; padding-top:5px" />
        <div style="width: 20px"></div>
        <MudText Typo="Typo.h3" onclick="@Home" Class="tipo" Style="padding-top: 10px; cursor: pointer; font-weight: bold; font-size: 2rem; font-family: 'Poppins', sans-serif;">
            MANA GEEK
        </MudText>

        <MudSpacer />

        @if (autenticado)
        {
            @*  <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif;" Typo="Typo.h6" Class="mt-1">Hola, @nombre</MudText> *@

            <div style="width: 10px"></div>

            <MudButton ButtonType="ButtonType.Button"
                       EndIcon="@Icons.Material.Filled.ShoppingCart"
                       Size="Size.Large"
                       Color="Color.Inherit"
                       Variant="Variant.Text"
                       OnClick="CarritoCompras"
                       Style="border-radius: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">
                Carrito
            </MudButton>

            <div style="width: 10px"></div>

            <MudButton ButtonType="ButtonType.Button"
                       EndIcon="@Icons.Material.Filled.Logout"
                       Size="Size.Large"
                       Color="Color.Inherit"
                       Variant="Variant.Text"
                       OnClick="CerrarSesion"
                       Style="border-radius: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">
                Cerrar Sesión
            </MudButton>

            <div style="width: 10px"></div>


        }
        else
        {
            <MudButton ButtonType="ButtonType.Button"
                       EndIcon="@Icons.Material.Filled.Login"
                       Size="Size.Large"
                       Color="Color.Inherit"
                       Variant="Variant.Text"
                       OnClick="IniciarSesion"
                       Style="border-radius: 20px; padding-top: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">
                Iniciar Sesión
            </MudButton>

            <div style="width: 10px"></div>

            <MudButton ButtonType="ButtonType.Button"
                       EndIcon="@Icons.Material.Filled.AppRegistration"
                       Size="Size.Large"
                       Color="Color.Inherit"
                       Variant="Variant.Text"
                       OnClick="Registrarse"
                       Style="border-radius: 20px ; padding-top: 17px; font-weight: bold; font-size: 1.2rem; font-family: 'Poppins', sans-serif">
                Registrarse
            </MudButton>
        }

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Always">
        <div style="height: 10px"></div>
        <MudDrawerHeader>
            <MudAvatar Variant="Variant.Filled">@nombre?.Substring(0, 1)</MudAvatar>
            <div style="width: 10px"></div>
            <MudText Typo="Typo.h5" Class="mt-1" Style="overflow-wrap: normal; max-width: 200px">@nombre</MudText>
        </MudDrawerHeader>
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = false;
    string user = "Invitado";
    string nombre = "Invitado";
    string rol = string.Empty;
    bool autenticado = false;

    private string searchQuery = string.Empty;
    private List<Evento> filteredEventos = new List<Evento>();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private void Home()
    {
        NavigationManager.NavigateTo("/");
    }
    private void Registrarse()
    {
        NavigationManager.NavigateTo($"/Auth/usuario-registro");
    }
    private void IniciarSesion()
    {
        NavigationManager.NavigateTo($"/Auth/iniciar-sesion");
    }

    private void CarritoCompras()
    {
        NavigationManager.NavigateTo($"/usuario/carrito-comprar");
    }

    protected override async Task OnInitializedAsync()
    {
        await ValidarSesion();
    }

    private async Task CerrarSesion()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", forceLoad: true);

        await ValidarSesion();
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var rolClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);

        if (rolClaim != null && (rolClaim.Value.Equals("Admin") || rolClaim.Value.Equals("Customer")))
        {
            autenticado = true;
            rol = rolClaim.Value;
        }
        else
        {
            autenticado = false;
        }

        nombre = nombreClaim?.Value ?? "Invitado";
    }

    private void PerformSearch(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SearchEventos();
        }
    }

    private void SearchEventos()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEventos = EventoService.Eventos;
        }
        else
        {
            filteredEventos = EventoService.Eventos.Where(e => e.Nombre.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || e.Ubicacion.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }
}