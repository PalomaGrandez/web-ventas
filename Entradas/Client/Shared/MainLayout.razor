@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IEventoService EventoService


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudAppBar Elevation="1" Style="height: 75px; background-color: #002448; z-index: 1300;">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
    <MudImage Src="icons/mago.png" Height="50" Width="50" onclick="@Home" Style="cursor: pointer;" />

    <MudText Typo="Typo.h3" onclick="@Home" Class="ml-2 d-none d-md-flex" Style="padding-top: 10px; cursor: pointer; font-weight: bold; font-size: 2rem; font-family: 'Poppins', sans-serif;">
        MANA GEEK
    </MudText>

    <MudText Typo="Typo.h5" onclick="@Home" Class="ml-2 d-flex d-md-none flex-column" Style="cursor: pointer; font-weight: bold; font-family: 'Poppins', sans-serif; line-height: 1;">
        <span>MANA</span>
        <span>GEEK</span>
    </MudText>

    <MudSpacer />
    @if (autenticado)
    {

        <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Inherit"
                 AnchorOrigin="Origin.BottomCenter"
                 TransformOrigin="Origin.TopCenter">
            <MudMenuItem Style="padding: 0;">
                <div style="border-radius: 7px; font-weight: normal; font-size: 0.8rem; font-family: 'Poppins', sans-serif; padding: 4px 20px;">
                    Hola @nombre
                </div>
            </MudMenuItem>
        </MudMenu>



        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudButton EndIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="CarritoCompras" Style="border-radius: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">Carrito</MudButton>
            <MudButton EndIcon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="CerrarSesion" Style="border-radius: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">Cerrar Sesión</MudButton>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="CarritoCompras" />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="CerrarSesion" />
        </MudHidden>
    }
    else
    {
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudButton EndIcon="@Icons.Material.Filled.Login" Color="Color.Inherit" OnClick="IniciarSesion" Style="border-radius: 20px; padding-top: 20px; font-weight: bold; font-size:  1.2rem; font-family: 'Poppins', sans-serif">Iniciar Sesión</MudButton>
            <MudButton EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Inherit" OnClick="Registrarse" Style="border-radius: 20px ; padding-top: 17px; font-weight: bold; font-size: 1.2rem; font-family: 'Poppins', sans-serif">Registrarse</MudButton>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudButton EndIcon="@Icons.Material.Filled.Login" Color="Color.Inherit" OnClick="IniciarSesion" />
                    <MudButton EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Inherit" OnClick="Registrarse" />
        </MudHidden>

    }


    </MudAppBar>
<MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Never" Anchor="Anchor.Left" Overlay="false"
           Style="position: fixed; height: 100vh; z-index: 1200; background-color: white;">

    <div style="height: 30px"></div>
    <MudDrawerHeader Style="margin-top: 50px;">
        <MudAvatar Variant="Variant.Filled">@nombre?.Substring(0, 1)</MudAvatar>
        <div style="width: 30px"></div>
        <MudText Typo="Typo.h5" Class="mt-1" Style="overflow-wrap: normal; max-width: 200px">@nombre</MudText>
    </MudDrawerHeader>
    <NavMenu></NavMenu>
</MudDrawer>

<style>
    .mud-overlay {
        display: none !important;
    }
</style>



    <MudMainContent>
        @Body
    </MudMainContent>



@code {
    bool _drawerOpen = false;
    string user = "Invitado";
    string nombre = "Invitado";
    string rol = string.Empty;
    bool autenticado = false;

    private string searchQuery = string.Empty;
    private List<Evento> filteredEventos = new List<Evento>();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private void Home()
    {
        NavigationManager.NavigateTo("/");
    }
    private void Registrarse()
    {
        NavigationManager.NavigateTo($"/Auth/usuario-registro");
    }
    private void IniciarSesion()
    {
        NavigationManager.NavigateTo($"/Auth/iniciar-sesion");
    }

    private void CarritoCompras()
    {
        NavigationManager.NavigateTo($"/usuario/carrito-comprar");
    }

    protected override async Task OnInitializedAsync()
    {
        await ValidarSesion();
    }

    private async Task CerrarSesion()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", forceLoad: true);

        await ValidarSesion();
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var rolClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);

        if (rolClaim != null && (rolClaim.Value.Equals("Admin") || rolClaim.Value.Equals("Customer")))
        {
            autenticado = true;
            rol = rolClaim.Value;
        }
        else
        {
            autenticado = false;
        }

        nombre = nombreClaim?.Value ?? "Invitado";
    }

    private void PerformSearch(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SearchEventos();
        }
    }

    private void SearchEventos()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEventos = EventoService.Eventos;
        }
        else
        {
            filteredEventos = EventoService.Eventos.Where(e => e.Nombre.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || e.Ubicacion.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }
}