@page "/usuario/pago-completo"
@inject IJSRuntime JS
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject IAuthService AuthService

<PageTitle>Pago Completo</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-10">
    <MudPaper Elevation="3" Class="pa-7 rounded-xl">
        <MudGrid Justify="Justify.Center" Spacing="5">
            <MudItem xs="12">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" Class="d-block mx-auto mb-4" />
            </MudItem>
            <MudItem xs="12">
                <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif;" Typo="Typo.h4" Align="Align.Center" Class="mb-4">¡Pago Completado!</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText Style="font-family: 'Poppins', sans-serif;" Typo="Typo.subtitle1" Align="Align.Center" Class="mb-5">
                    Gracias por tu compra. Tu pedido ha sido procesado con éxito.
                </MudText>
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-center mb-5">
                <MudImage Src="/icons/mago.png" Alt="Imagen de éxito" Width="190" Height="190" ObjectFit="ObjectFit.Cover" Class="rounded-lg" />
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton Style="font-family: 'Poppins', sans-serif; font-weight:bold" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"
                           EndIcon="@Icons.Material.Filled.Home" OnClick="GoToHome">
                    Inicio
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>
@code {
    [Parameter]
    public int MontoTotal { get; set; } // Parámetro para recibir el monto total
    public int eventoId { get; set; }
    private bool _cargandoEvento = false;
    private bool _cargandoEventoEntrada = false;
    private bool _cargandoEventoFecha = false;

    private bool _dialogOpen = false;

    private string btnText = "REALIZAR PEDIDO";
    private OrdenDetalleRegistroDto ordenRegistroDto = new();
    private List<OrdenDetalleRegistroDto> ordenDetalle = new();
    private OrdenRegistroDto orden = new();

    private bool _eventoSoloLectura = false;
    private bool _guardando = false;
    string user = "Invitado";
    string nombre = "Invitado";
    string email = "Invitado";
    string apellido = "Invitado";
    
    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {   
         await CargarOrdenLocal();
         await RealizarPedido();
       
    }

    private async Task CargarOrdenLocal()
    {
        ordenDetalle = await OrdenService.ObtenerOrdenDetalleLocal();
        Console.WriteLine(ordenDetalle.Count);
    }

    public Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false, // Desactiva el cierre con la tecla Escape
                DisableBackdropClick = true // Desactiva el cierre al hacer clic fuera del diálogo
            };
        // Muestra el diálogo
        return DialogService.ShowAsync<CustomDialog>(null, options);
    }

    public async Task RealizarPedido()
    {
        _guardando = true;

        var userId = await AuthService.GetUserId();

        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            return;
        }

        orden.FechaOrden = DateTime.Now;
        orden.Estado = EstadosOrden.REGISTRADO;
        orden.Items = ordenDetalle;
        orden.UsuarioId = userId;
        orden.PrecioTotal = (decimal)ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular);

        var response = await OrdenService.CreateOrden(orden);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (response.Success)
        {
            await OrdenService.LimpiarItemLocal();
            _guardando = true;

            //Snackbar.Add("Orden registrada exitosamente!", Severity.Success);
            //await OpenDialogAsync();
           // NavigationManager.NavigateTo("/confirmacion-compra");
        }
        else
        {
            _guardando = true;
            Snackbar.Add($"Ha sucedido un error: {response.Message}", Severity.Error);
           // NavigationManager.NavigateTo("/");
        }
    }

}