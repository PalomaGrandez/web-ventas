@page "/usuario/carrito-comprar"
@inject NavigationManager NavigationManager
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject IAuthService AuthService

<PageTitle>Carrito de Compras</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-10">
    <div style="height:20px" />
    <MudCard Elevation="3">
        <MudCardHeader>
            <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; text-align: center; width: 100%;" Align="Align.Center" Typo="Typo.h5">Resumen de la compra</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Items="@ordenDetalle" Context="detalleContext" Class="p-3" Hover="true" Striped="true" Elevation="3" Breakpoint="Breakpoint.Sm" RowsPerPage="100">
                <HeaderContent>
                    <MudTh>CARTA</MudTh>
                    <MudTh>NOMBRE</MudTh>
                    <MudTh>CONDICION</MudTh>
                    <MudTh>PRECIO</MudTh>
                    <MudTh>CANTIDAD</MudTh>
                    <MudTh>TOTAL</MudTh>
                    <MudTh>ELIMINAR</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="IMAGEN">
    <MudImage Src="@detalleContext.Imagen" Alt="@detalleContext.NombreEvento" Style="max-width:50px; height:auto;" />
</MudTd>
                    <MudTd DataLabel="FECHA">@detalleContext.NombreEvento</MudTd>
                    <MudTd DataLabel="TIPO DE INTRUMENTO">@detalleContext.EntradaTipo</MudTd>
                    <MudTd DataLabel="PRECIO">@detalleContext.PrecioRegular</MudTd>
                    <MudTd DataLabel="CANTIDAD">
                        <div class="d-flex align-items-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small" Color="Color.Error" OnClick="() => DisminuirCantidad(detalleContext)" Disabled="@((detalleContext.Cantidad <= 1))" />
                            <MudText Typo="Typo.h6" Class="mx-2">@detalleContext.Cantidad</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="() => AumentarCantidad(detalleContext)" Disabled="@((detalleContext.Cantidad >= 10))" />
                        </div>
                    </MudTd>
                    <MudTd DataLabel="TOTAL">@detalleContext.PrecioTotal</MudTd>
                    <MudTd DataLabel="ELIMINAR">
                        <MudFab Variant="Variant.Filled"
                                StartIcon="@Icons.Material.Filled.Delete"
                                Color="Color.Error"
                                Size="Size.Small"
                                OnClick="()=> RemoverItemLocal((int) detalleContext.EventoId!,
                                                                           (int)detalleContext.EventoEntradaId!)" />
                    </MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTd colspan="3" Style="align-content:end"><MudText Typo="Typo.h6">TOTAL GENERAL:</MudText> </MudTd>
                    <MudTd Style="align-content:end"><MudText Typo="Typo.h6">S/.@ordenDetalle.Sum(pd => pd.Cantidad * pd.PrecioRegular)</MudText></MudTd>
                </FooterContent>
            </MudTable>
        </MudCardContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
            <MudCard Elevation="0">
                <MudCardActions>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12" sm="4" md="3">
                            <MudButton ButtonType="ButtonType.Button"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Disabled="@_guardando"
                                       StartIcon="@Icons.Material.Filled.SaveAlt"
                                       OnClick="ConfirmacionCompra"
                                       FullWidth="true"
                                       Class="no-wrap">
                                       
                                @if (_guardando)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Guardando</MudText>
                                }
                                else
                                {
                                    @btnText
                                }
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="4" md="3">
                            <MudButton ButtonType="ButtonType.Button"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="Cancelar"
                                       StartIcon="@Icons.Material.Filled.Cancel"
                                       FullWidth="true"
                                       Class="no-wrap">
                                Cancelar
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="4" md="3">
                            <MudButton ButtonType="ButtonType.Button"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       EndIcon="@Icons.Material.Filled.Home"
                                       OnClick="GoToHome"
                                       FullWidth="true"
                                       Class="no-wrap">
                                SEGUIR NAVEGANDO
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </MudContainer>
</MudCard>
</MudContainer>

<style>
    .no-wrap {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

</style>

@code {
    private bool _guardando = false;
    private string btnText = "REALIZAR PEDIDO";
    private List<OrdenDetalleRegistroDto> ordenDetalle = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarOrdenLocal();
    }


    // private async Task ConfirmacionCompra()
    // {
    //     // Verificar si hay items en la orden
    //     if (!ordenDetalle.Any())
    //     {
    //         Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    //         Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
    //         return;
    //     }

    //     // Calcular el total de la orden y convertirlo a entero
    //     var totalOrden = (int)(ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular));

    //     // Navegar a la pantalla de confirmación de compra pasando el monto total como parámetro
    //     NavigationManager.NavigateTo($"/usuario/completar-compra/{totalOrden}");
    // }


    private async Task ConfirmacionCompra()
    {
        // Verificar si el usuario está autenticado y su rol
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        var rol = await AuthService.GetUserRole();

        // Si no está autenticado o no es "Customer", redirigir a la página de inicio de sesión
        if (!isAuthenticated || !rol.Equals("Customer"))
        {
            NavigationManager.NavigateTo($"Auth/iniciar-sesion");
            return;
        }

        // Verificar si hay ítems en la orden
        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            return;
        }

        // Calcular el total de la orden y convertirlo a entero
        var totalOrden = (int)(ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular));

        // Navegar a la pantalla de confirmación de compra pasando el monto total como parámetro
        NavigationManager.NavigateTo($"/usuario/completar-compra/{totalOrden}");
    }


    private void GoToHome() { NavigationManager.NavigateTo("/"); }

    private void AumentarCantidad(OrdenDetalleRegistroDto detalleContext)
    {
        var item = ordenDetalle.FirstOrDefault(d => d.EventoId == detalleContext.EventoId &&
                                                    d.EventoEntradaId == detalleContext.EventoEntradaId &&
                                                    d.EventoFechaId == detalleContext.EventoFechaId);
        if (item != null && item.Cantidad < 10)
        {
            item.Cantidad++;
            item.PrecioTotal = item.PrecioRegular * item.Cantidad;
            OrdenService.AgregarItemLocal(item);  // Esta línea asegura que se guarde la cantidad actualizada
            StateHasChanged();
        }
    }


    private void DisminuirCantidad(OrdenDetalleRegistroDto detalleContext)
    {
        var item = ordenDetalle.FirstOrDefault(d => d.EventoId == detalleContext.EventoId &&
                                                    d.EventoEntradaId == detalleContext.EventoEntradaId &&
                                                    d.EventoFechaId == detalleContext.EventoFechaId);
        if (item != null && item.Cantidad > 1)
        {
            item.Cantidad--;
            item.PrecioTotal = item.PrecioRegular * item.Cantidad;
            OrdenService.AgregarItemLocal(item);  // Esta línea asegura que se guarde la cantidad actualizada
            StateHasChanged();
        }
    }

    private async Task CargarOrdenLocal()
    {
        ordenDetalle = await OrdenService.ObtenerOrdenDetalleLocal();
    }

    public async Task RemoverItemLocal(int eventoId, int eventoEntradaId)
    {
        await OrdenService.RemoverItemLocal(eventoId, eventoEntradaId);
        await CargarOrdenLocal();
        StateHasChanged();
    }

    private async Task Cancelar()
    {
        await OrdenService.LimpiarItemLocal();
        NavigationManager.NavigateTo("/");
    }
}