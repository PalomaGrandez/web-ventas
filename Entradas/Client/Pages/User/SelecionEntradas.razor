@page "/seleccion-producto/{eventoId:int}"
@inject NavigationManager NavigationManager
@inject IEventoService EventoService
@inject IEventoEntradaService EventoEntradaService
@inject IEventoFechaService EventoFechaService
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject IAuthService AuthService

<PageTitle>
    Realice su compra
    </PageTitle>

<div style="border-radius: 20px; font-weight: bold; font-family: 'Poppins', sans-serif; height:20px" />


<MudContainer MaxWidth="MaxWidth.Large" Class="mt-10">

    <MudGrid Justify="Justify.Center">
        <MudItem lg="12">
            <EditForm Model="ordenRegistroDto" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; text-align: center; width: 100%;" Typo="Typo.h5">Realice su compra</MudText>
                    </MudCardHeader>
                    <MudCardContent>

                        <MudGrid>

                            <MudItem lg="6" sm="12" xs="12">
                                <MudTextField T="string"
                                              Label="Carta"
                                              Disabled="@_cargandoEvento"
                                              Value="@eventoNombre"
                                              ReadOnly="true"
                                              Adornment="Adornment.Start"
                                              Placeholder="Seleccione el juego"
                                              Variant="Variant.Outlined"
                                              HelperText="Nombre de la carta seleccionada"
                                              For="@(() => eventoNombre)">
                                </MudTextField>
                            </MudItem>
                            @* <MudItem lg="6" sm="12" xs="12">
                                <MudSelect T="int?" Label="Carta" Disabled="@_cargandoEvento"
                                AnchorOrigin="Origin.BottomCenter"
                                Value="@ordenRegistroDto!.EventoId"
                                ValueChanged="@((int? eventoSeleccionado) => CargarEventoEntrada((int)eventoSeleccionado))"
                                Adornment="Adornment.Start"

                                Variant="Variant.Outlined"
                                HelperText="Seleccione el juego"
                                ReadOnly="@_eventoSoloLectura"
                                For="@(() => ordenRegistroDto!.EventoId)">
                                <MudSelectItem Value="@((int?) 0)">Seleccione el juego</MudSelectItem>
                                @if (EventoService.Eventos.Count > 0)
                                {
                                @foreach (var evento in EventoService.Eventos)
                                {
                                <MudSelectItem Value="@((int?)evento.EventoId)">@evento.Nombre</MudSelectItem>
                                }
                                }
                                </MudSelect>

                               
                            </MudItem>*@

                            <MudItem lg="6" sm="12" xs="12">
                                <MudSelect T="int?" Label="Condición" Disabled="@_cargandoEventoEntrada"
                                           AnchorOrigin="Origin.BottomCenter"
                                           Value="@ordenRegistroDto!.EventoEntradaId"
                                           ValueChanged="@((int? eventoEntradaSeleccionado) => CargarEventoFecha((int)eventoEntradaSeleccionado!))"
                                           Adornment="Adornment.Start"
                                           Placeholder="Condición"
                                           Variant="Variant.Outlined"
                                           HelperText="Seleccione la condición"
                                           For="@(() => ordenRegistroDto!.EventoEntradaId)">
                                    @* <MudSelectItem Value="@((int?) 0)">Seleccione el evento</MudSelectItem> *@
                                    @if (EventoEntradaService.EventoEntradas.Count > 0)
                                    {
                                        @foreach (var eventoEntrada in EventoEntradaService.EventoEntradas)
                                        {
                                            <MudSelectItem Value="@((int?)eventoEntrada.EventoEntradaId)">@eventoEntrada.Tipo</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                          @*    <MudItem lg="4" sm="12" xs="12">
                            <MudSelect T="int?" Label="Fecha"
                            Disabled="@_cargandoEventoFecha"
                            AnchorOrigin="Origin.BottomCenter"
                            Value="@ordenRegistroDto!.EventoFechaId"
                            ValueChanged="@((int? eventoFechaId)=>FechaSeleccionada((int)eventoFechaId!))"
                            Adornment="Adornment.Start"

                            Variant="Variant.Outlined"
                            HelperText="Seleccione la fecha"
                            For="@(() => ordenRegistroDto!.EventoFechaId)">
                            <MudSelectItem Value="@((int?) 0)">Seleccione el evento</MudSelectItem>
                            @if (EventoFechaService.EventoFechas.Count > 0)
                            {
                            @foreach (var eventoFecha in EventoFechaService.EventoFechas)
                            {
                            <MudSelectItem Value="@((int?)eventoFecha.EventoFechaId)">@eventoFecha.Fecha</MudSelectItem>
                            }
                            }
                            </MudSelect>
                            </MudItem>*@

                            <MudItem lg="4" sm="12" xs="12">
                                <MudNumericField T="decimal"
                                                 Label="Precio"
                                                 @bind-Value="@ordenRegistroDto.PrecioRegular"
                                                 Variant="Variant.Outlined"
                                                 ReadOnly="true"
                                                 Culture="@CultureInfo.InvariantCulture"
                                                 Format="F2" />
                            </MudItem>
                            <MudItem lg="4" sm="12" xs="12">
                                <MudNumericField T="int" Label="Cantidad"
                                                 Variant="Variant.Outlined"
                                                 @bind-Value="@ordenRegistroDto.Cantidad"
                                                 For="@(() => ordenRegistroDto!.Cantidad)"
                                                 HelperText="Ingrese la cantidad deseada" Max="10" Min="1" />
                            </MudItem>
                        </MudGrid>

                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-center">
                        <MudButton ButtonType="ButtonType.Submit"
                                   Size="Size.Large"
                                   Variant="Variant.Filled" Color="Color.Info" FullWidth="true" Style="max-width:300px"
                                   StartIcon="@Icons.Material.Filled.Add" Class="mx-2">
                            Agregar
                        </MudButton>

                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudItem>

        @* <MudItem xs="12" sm="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; text-align: center; width: 100%;" Align="Align.Center" Typo="Typo.h5">Resumen de la compra</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@ordenDetalle" Context="detalleContext" Class="p-3" Hover="true" Striped="true" Elevation="3" Breakpoint="Breakpoint.Sm" RowsPerPage="100">
                        <HeaderContent>

                            <MudTh>CARTA</MudTh>
                            <MudTh>CONDICION</MudTh>
                            <MudTh>PRECIO</MudTh>
                            <MudTh>CANTIDAD</MudTh>
                            <MudTh>TOTAL</MudTh>
                            <MudTh>ELIMINAR</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="FECHA">@eventoNombre</MudTd>
                            <MudTd DataLabel="TIPO DE INTRUMENTO">@detalleContext.EntradaTipo</MudTd>
                            <MudTd DataLabel="PRECIO">@detalleContext.PrecioRegular</MudTd>
                            <MudTd DataLabel="CANTIDAD">
                                <div class="d-flex align-items-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small" Color="Color.Error" OnClick="() => DisminuirCantidad(detalleContext)" Disabled="@((detalleContext.Cantidad <= 1))" />
                                    <MudText Typo="Typo.h6" Class="mx-2">@detalleContext.Cantidad</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="() => AumentarCantidad(detalleContext)" Disabled="@((detalleContext.Cantidad >= 10))" />
                                </div>
                            </MudTd>
                            <MudTd DataLabel="TOTAL">@detalleContext.PrecioTotal</MudTd>
                            <MudTd DataLabel="ELIMINAR">
                                <MudFab Variant="Variant.Filled"
                                        StartIcon="@Icons.Material.Filled.Delete"
                                        Color="Color.Error"
                                        Size="Size.Small"
                                        OnClick="()=> RemoverItemLocal((int) detalleContext.EventoId!,
                                                                           (int)detalleContext.EventoEntradaId!)" />
                            </MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTd colspan="3" Style="align-content:end"><MudText Typo="Typo.h6">TOTAL GENERAL:</MudText> </MudTd>
                            <MudTd Style="align-content:end"> <MudText Typo="Typo.h6">S/.@ordenDetalle.Sum(pd => pd.Cantidad * pd.PrecioRegular) </MudText> </MudTd>
                        </FooterContent>
                        <PagerContent>
                            <div class="d-flex flex-column align-center"> *@
                                @* <MudTablePager />*@
                                @* @<MudPagination Variant="Variant.Filled" Count="paginasTotales" SelectedChanged="PaginaSeleccionada" Class="pa-4" />@ *@
                           @*  </div>
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
                <MudCardActions Class="d-flex">
                    <MudGrid Justify="Justify.Center">
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Button"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Disabled="@_guardando"
                                       StartIcon="@Icons.Material.Filled.SaveAlt"
                                       OnClick="ConfirmacionCompra"
                                       Class="mx-2">

                                @if (_guardando)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Guardando</MudText>
                                }
                                else
                                {
                                    @<MudText>@btnText</MudText>@
                                   @*  @btnText
                                }


                            </MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Button"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="Cancelar"
                                       StartIcon="@Icons.Material.Filled.Cancel" Class="mx-2">
                                Cancelar
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </MudItem> *@
 

    </MudGrid>

</MudContainer>

@code {

    [Parameter]
    public int eventoId { get; set; }
    private bool _cargandoEvento = false;
    private bool _cargandoEventoEntrada = false;
    private bool _cargandoEventoFecha = false;

    private bool _eventoSoloLectura = false;
    private bool _guardando = false;

    private string eventoNombre = ""; // Variable para almacenar el nombre del evento seleccionado

    private string btnText = "REALIZAR PEDIDO";
    private OrdenDetalleRegistroDto ordenRegistroDto = new();
    private List<OrdenDetalleRegistroDto> ordenDetalle = new();
    private OrdenRegistroDto orden = new();

    protected override async Task OnParametersSetAsync()
    {
        ordenRegistroDto.EventoId = eventoId;
        _eventoSoloLectura = true;
        await CargarEventoEntrada(eventoId);

        // Seleccionar automáticamente la primera entrada y establecer valores iniciales
        if (EventoEntradaService.EventoEntradas.Any())
        {
            var primeraEntrada = EventoEntradaService.EventoEntradas.First();
            await CargarEventoFecha(primeraEntrada.EventoEntradaId);
            ordenRegistroDto.Cantidad = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarEventos();
        await CargarOrdenLocal();
    }



    private async Task ConfirmacionCompra()
    {
        // Verificar si hay items en la orden
        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            return;
        }

        // Calcular el total de la orden y convertirlo a entero
        var totalOrden = (int)(ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular));

        // Navegar a la pantalla de confirmación de compra pasando el monto total como parámetro
        NavigationManager.NavigateTo($"/usuario/completar-compra/{totalOrden}");
    }

    private async Task RealizarPedido()
    {
        _guardando = true;

        var userId = await AuthService.GetUserId();

        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            return;
        }

        orden.FechaOrden = DateTime.Now;
        orden.Estado = EstadosOrden.REGISTRADO;
        orden.Items = ordenDetalle;
        orden.UsuarioId = userId;
        orden.PrecioTotal = (decimal)ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular);

        var response = await OrdenService.CreateOrden(orden);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (response.Success)
        {
            await OrdenService.LimpiarItemLocal();
            _guardando = true;

            Snackbar.Add("Orden registrada exitosamente!", Severity.Success);
            NavigationManager.NavigateTo("/completar-compra");
        }
        else
        {
            _guardando = true;
            Snackbar.Add($"Ha sucedido un error: {response.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnValidSubmit()
    {
        ordenRegistroDto.PrecioTotal = ordenRegistroDto.PrecioRegular * ordenRegistroDto.Cantidad;
        ordenRegistroDto.EventoFechaId = 1;
        ordenRegistroDto.NombreEvento = eventoNombre;

        await OrdenService.AgregarItemLocal(ordenRegistroDto);
        await CargarOrdenLocal();

        // Navegar a la página de resumen de la compra
        NavigationManager.NavigateTo("/usuario/carrito-comprar");

        // Limpiar y resetear los campos del formulario
        ordenRegistroDto.EventoEntradaId = 0;
        ordenRegistroDto.EventoFechaId = 0;
        ordenRegistroDto.PrecioRegular = 0;
        ordenRegistroDto.Cantidad = 0;
        ordenRegistroDto = new();
        ordenRegistroDto.EventoId = eventoId;
        StateHasChanged();
    }


    /*    private async Task OnValidSubmit()
    {
        // Actualiza las cantidades y agrega el nuevo producto a la lista
        var existingItem = ordenDetalle.FirstOrDefault(d => d.EventoId == ordenRegistroDto.EventoId &&
                                                            d.EventoEntradaId == ordenRegistroDto.EventoEntradaId &&
                                                            d.EventoFechaId == ordenRegistroDto.EventoFechaId);
        if (existingItem != null)
        {
            // Actualiza el producto existente
            existingItem.Cantidad = ordenRegistroDto.Cantidad;
            existingItem.PrecioTotal = existingItem.PrecioRegular * existingItem.Cantidad;
        }
        else
        {
            // Agrega un nuevo producto a la lista
            ordenDetalle.Add(new OrdenDetalleRegistroDto
                {
                    EventoId = ordenRegistroDto.EventoId,
                    EventoEntradaId = ordenRegistroDto.EventoEntradaId,
                    EventoFechaId = ordenRegistroDto.EventoFechaId,
                    PrecioRegular = ordenRegistroDto.PrecioRegular,
                    Cantidad = ordenRegistroDto.Cantidad,
                    PrecioTotal = ordenRegistroDto.PrecioRegular * ordenRegistroDto.Cantidad,
                    EntradaTipo = ordenRegistroDto.EntradaTipo
                });
        }

        await OrdenService.AgregarItemLocal(ordenRegistroDto);
        await CargarOrdenLocal();

        // Limpia el formulario
        ordenRegistroDto = new();
        ordenRegistroDto.EventoId = eventoId;
        StateHasChanged();
    }*/

    private void AumentarCantidad(OrdenDetalleRegistroDto detalleContext)
    {
        // Verifica si el detalleContext existe en la lista
        var item = ordenDetalle.FirstOrDefault(d => d.EventoId == detalleContext.EventoId &&
                                                    d.EventoEntradaId == detalleContext.EventoEntradaId &&
                                                    d.EventoFechaId == detalleContext.EventoFechaId);
        if (item != null && item.Cantidad < 10)
        {
            item.Cantidad++;
            item.PrecioTotal = item.PrecioRegular * item.Cantidad;
            StateHasChanged(); // Actualizar la vista
        }
    }

    private async void  DisminuirCantidad(OrdenDetalleRegistroDto detalleContext)
    {
        // Verifica si el detalleContext existe en la lista
        var item = ordenDetalle.FirstOrDefault(d => d.EventoId == detalleContext.EventoId &&
                                                    d.EventoEntradaId == detalleContext.EventoEntradaId &&
                                                    d.EventoFechaId == detalleContext.EventoFechaId);
        if (item != null && item.Cantidad > 1)
        {
            item.Cantidad--;
            item.PrecioTotal = item.PrecioRegular * item.Cantidad;
            await OrdenService.AgregarItemLocal(ordenRegistroDto);
            await CargarOrdenLocal();
            StateHasChanged(); // Actualizar la vista
        }
    }

    private async Task CargarEventos()
    {
        _cargandoEvento = true;
        EventoService.OnChange += StateHasChanged;
        await EventoService.GetEventos();
        _cargandoEvento = false;
    }

    private async Task CargarEventoEntrada(int eventoSeleccionado)
    {
        ordenRegistroDto.EventoId = eventoSeleccionado;
        _cargandoEventoEntrada = true;

        // Obtener las entradas del evento seleccionado
        await EventoEntradaService.GetEventoEntradasPorEvento(1, eventoSeleccionado);

        // Buscar el evento seleccionado en la lista de eventos
        var evento = EventoService.Eventos.FirstOrDefault(e => e.EventoId == eventoSeleccionado);
        if (evento != null)
        {
            // Actualizar el nombre del evento para mostrarlo en el campo de texto
            eventoNombre = evento.Nombre;
        }
        else
        {
            eventoNombre = "Evento no encontrado"; // En caso de que el evento no se encuentre
        }

        // Suscribirse al evento OnChange del servicio para actualizar la UI
        EventoEntradaService.OnChange += StateHasChanged;

        _cargandoEventoEntrada = false;
        StateHasChanged(); // Forzar la actualización de la UI
    }

    private async Task CargarEventoFecha(int eventoEntradaSeleccionado)
    {
        ordenRegistroDto.EventoEntradaId = eventoEntradaSeleccionado;

        var responseEventoEntrada = await EventoEntradaService.GetEventoEntradaPorId(eventoEntradaSeleccionado);

        _cargandoEventoFecha = true;
        await EventoFechaService.GetEventoFechasPorEvento(1, (int)ordenRegistroDto.EventoId!);
        EventoEntradaService.OnChange += StateHasChanged;
        _cargandoEventoFecha = false;

        ordenRegistroDto.PrecioRegular = (decimal)responseEventoEntrada.Data!.PrecioRegular!;
        ordenRegistroDto.EntradaTipo = responseEventoEntrada.Data.Tipo;

        StateHasChanged(); // Forzar actualización de la UI
    }


    private async Task FechaSeleccionada(int eventoFechaId)
    {
        ordenRegistroDto.EventoFechaId = eventoFechaId;
        var response = await EventoFechaService.GetEventoFechaPorId(eventoFechaId);

        ordenRegistroDto.Fecha = DateTime.Now;
    }

    private async Task CargarOrdenLocal()
    {
        ordenDetalle = await OrdenService.ObtenerOrdenDetalleLocal();
    }

    public async Task RemoverItemLocal(int eventoId, int eventoEntradaId)
    {
        await OrdenService.RemoverItemLocal(eventoId, eventoEntradaId);
        await CargarOrdenLocal();
        StateHasChanged();
    }

    private async Task Cancelar()
    {
        await OrdenService.LimpiarItemLocal();
        NavigationManager.NavigateTo($"/producto-detalle/{eventoId}");
    }
}

