@page "/usuario/confirmacion-compra/{montoTotal:int}"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService

<PageTitle>Confirmación de Compra</PageTitle>

<div style="height:25px" />

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4" Align="Align.Center" Style="font-weight: 700; font-family: 'Poppins', sans-serif;">
                            COMPLETE SU COMPRA
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Style="font-family: 'Poppins', sans-serif;" Justify="Justify.Center">
                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: #E5E7EB;">
                                <MudText Typo="Typo.body1" Align="Align.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="mr-2" /> Su pedido estará disponible para ser recogido a partir del día siguiente,
                                    dentro de los días hábiles de lunes a sábado en el horario de 9 a.m. a 9 p.m.
                                </MudText>
                                <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-3">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" /> <strong>Avenida San Martin 721, pasaje D-44, Pueblo Libre</strong>.
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" Class="mt-4">
                            <MudText Typo="Typo.body1" Align="Align.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2" /> Realice su pago con Yape y envíe el comprobante a soporte@fabrica.pe con el asunto: Pago Pedido N° xxxx-xx-xxxxxx.
                            </MudText>
                            <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-2">
                                Verá sus productos en 'Mis Pedidos'.
                            </MudText>
                        </MudItem>
                        <MudItem xs="12" Class="mt-4">
                            <div class="d-flex justify-center">
                                <MudImage Height="300" ObjectPosition="ObjectPosition.Center" Src="pago/cod_aprobacion.png" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Fluid="true" Style="max-height:500px" />
                            </div>
                        </MudItem>

                    </MudGrid>
                </MudCardContent>

                <MudCardActions Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Button"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Id="btn_pagar"
                               OnClick="AbrirCulqi"
                               StartIcon="@Icons.Material.Filled.ShoppingCart"
                               Style="font-weight:bold;margin: 0 8px;"
                               Class=" hover-scale">
                               
                        Realizar Pago
                    </MudButton>

                    <!-- Nuevo botón para abrir el cuadro de diálogo -->
                    <MudButton ButtonType="ButtonType.Button"
                               Size="Size.Large"
                               Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="OpenDialogAsync"
                               StartIcon="@Icons.Material.Filled.Info"
                               Class=" hover-scale" Style="font-family: font-weight:bold; margin: 0 8px;">
                        Información
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>
<style>
    .hover-scale {
        transition: transform 0.3s ease;
    }

     .hover-scale:hover {
            transform: scale(1.05);
        }
</style>



@code {
    [Parameter]
    public int MontoTotal { get; set; } // Parámetro para recibir el monto total
    public int eventoId { get; set; }
    private bool _cargandoEvento = false;
    private bool _cargandoEventoEntrada = false;
    private bool _cargandoEventoFecha = false;

    private bool _dialogOpen = false;

    private string btnText = "REALIZAR PEDIDO";
    private OrdenDetalleRegistroDto ordenRegistroDto = new();
    private List<OrdenDetalleRegistroDto> ordenDetalle = new();
    private OrdenRegistroDto orden = new();

    private bool _eventoSoloLectura = false;
    private bool _guardando = false;
    string user = "Invitado";
    string nombre = "Invitado";
    string email = "Invitado";
    string apellido = "Invitado";

    protected override async Task OnInitializedAsync()
    {
        await ValidarSesion();
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var rolClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        var apellidoClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName);
        var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);

        nombre = nombreClaim?.Value ?? "Invitado";
        apellido = apellidoClaim?.Value;
        email = emailClaim?.Value;
        Console.WriteLine($"apellido inicializado: {apellidoClaim?.Value}"); // Registro de depuración
        Console.WriteLine($"apellido inicializado: {apellido}"); // Registro de depuración
        Console.WriteLine($"Nombre inicializado: {nombre}"); // Registro de depuración
    }  

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false, // Desactiva el cierre con la tecla Escape
                DisableBackdropClick = true // Desactiva el cierre al hacer clic fuera del diálogo
            };
        // Muestra el diálogo
        return DialogService.ShowAsync<CustomDialog>(null, options);
    }

    private async Task AbrirCulqi()
    {
        try
        {
            Console.WriteLine(nombre + apellido + email);
            // Convertir el precio a entero (por ejemplo, a céntimos)
            int precioTotalEntero = MontoTotal * 100;

            var settings = new
            {
                title = "Realización de pago",
                currency = "PEN",
                amount = precioTotalEntero
            };

            var client = new
            {
                email = email,
                first_name = nombre,
                last_name = apellido,
                phone_number = "900123456"
            };

            // Llamar a la función de JavaScript para abrir el checkout de Culqi con el precio total
            await JS.InvokeVoidAsync("AbrirCulqi", settings, client);

            // Mostrar el cuadro de diálogo después de que el pago se haya realizado
            _dialogOpen = true;
            StateHasChanged(); // Forzar la actualización de la interfaz de usuario
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al intentar abrir Culqi: {ex.Message}");
        }
    }


    private async Task RealizarPedido()
    {
        _guardando = true;

        // Verificar si hay ítems en la orden
        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            _guardando = false;
            return;
        }

        // Calcular el total de la orden
        var totalOrden = (decimal)ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular);

        // Preparar la orden
        var orden = new OrdenRegistroDto
            {
                FechaOrden = DateTime.Now,
                Estado = EstadosOrden.REGISTRADO,
                Items = ordenDetalle,
                UsuarioId = await AuthService.GetUserId(),
                PrecioTotal = totalOrden
            };

        try
        {
            // Abrir el checkout de Culqi
            int precioTotalEntero = (int)(totalOrden * 100);

            var settings = new
            {
                title = "Realización de pago",
                currency = "PEN",
                amount = precioTotalEntero
            };

            var client = new
            {
                email = email,
                first_name = nombre,
                last_name = apellido,
                phone_number = "900123456"
            };

            await JS.InvokeVoidAsync("AbrirCulqi", settings, client);

            // Asumir que el pago se ha realizado exitosamente
            var response = await OrdenService.CreateOrden(orden);

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            if (response.Success)
            {
                await OrdenService.LimpiarItemLocal();
                _guardando = false;

                Snackbar.Add("Orden registrada exitosamente!", Severity.Success);
                NavigationManager.NavigateTo("/confirmacion-compra");
            }
            else
            {
                Snackbar.Add($"Ha sucedido un error: {response.Message}", Severity.Error);
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al intentar realizar el pago: {ex.Message}", Severity.Error);
            _guardando = false;
        }
    }
}