@page "/usuario/completar-compra/{montoTotal:int}"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@using Microsoft.JSInterop;

<PageTitle>Confirmación de Compra</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
    <MudGrid Justify="Justify.SpaceAround">
        <MudItem xs="12" sm="7">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <MudText Typo="Typo.h4" Align="Align.Center" Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; text-align: center; width: 100%;">
                        COMPLETE SU COMPRA
                    </MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1" Style="font-family: 'Poppins', sans-serif; text-align:center;">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="mr-2" /> Su pedido estará disponible para ser recogido a partir del día siguiente,
                        dentro de los días hábiles de lunes a sábado en el horario de 9 a.m. a 9 p.m.
                    </MudText>
                    <MudText Typo="Typo.body1" Style="font-family: 'Poppins', sans-serif; text-align:center;" Class="mt-3">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" /> <strong>Avenida San Martin 721, pasaje D-44, Pueblo Libre</strong>.
                    </MudText>
                    <MudText Typo="Typo.body1" Style="font-family: 'Poppins', sans-serif; text-align:center;" Class="mt-4">
                        <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2" /> Realice su pago con Yape y envíe el comprobante a soporte@fabrica.pe con el asunto: Pago Pedido N° xxxx-xx-xxxxxx.
                    </MudText>
                    <MudText Typo="Typo.body1" Style="font-family: 'Poppins', sans-serif; text-align:center;" Class="mt-2">
                        Verá sus productos en 'Mis Pedidos'.
                    </MudText>
                    <div class="d-flex justify-center mt-4">
                        <MudImage Style="width:700px height:auto" ObjectPosition="ObjectPosition.Center" Src="pago/cod_aprobacion.png" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Fluid="true" />
                    </div>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center mt-4">
                    <MudButton ButtonType="ButtonType.Button"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Id="btn_pagar"
                               OnClick="AbrirCulqi"
                               StartIcon="@Icons.Material.Filled.ShoppingCart"
                               Style="font-weight:bold;margin: 0 8px;"
                               Class="hover-scale">
                        Realizar Pago
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; text-align: center; width: 100%;">
                        Resumen de Pedido
                    </MudText>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var item in ordenDetalle)
                    {
                        <MudPaper Elevation="0" Class="pa-2 mb-2 rounded-lg" Style="background-color: #F5F5F5;">
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="font-family: 'Poppins', sans-serif;">
                                @item.NombreEvento (@item.EntradaTipo)
                            </MudText>
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="font-family: 'Poppins', sans-serif;">
                                Cantidad: @item.Cantidad
                            </MudText>
                            <MudText Typo="Typo.body2" Align="Align.Left" Style="font-family: 'Poppins', sans-serif;">
                                Precio: S/.@item.PrecioTotal
                            </MudText>
                        </MudPaper>
                    }
                </MudCardContent>
                <MudCardFooter>
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-weight: bold; font-family: 'Poppins', sans-serif; text-align:center;">
                        Total: S/.@ordenDetalle.Sum(pd => pd.PrecioTotal)
                    </MudText>
                </MudCardFooter>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .hover-scale {
        transition: transform 0.3s ease;
    }

    .hover-scale:hover {
        transform: scale(1.05);
    }
</style>

@code {
    [Parameter]
    public int MontoTotal { get; set; } // Parámetro para recibir el monto total

    private List<OrdenDetalleRegistroDto> ordenDetalle = new();
    private bool _guardando = false;
    string nombre = "Invitado";
    string apellido = "Invitado";
    string email = "Invitado";

    protected override async Task OnInitializedAsync()
    {
        await ValidarSesion();
        await CargarOrdenLocal();
    }

    private async Task CargarOrdenLocal()
    {
        ordenDetalle = await OrdenService.ObtenerOrdenDetalleLocal();
        Console.WriteLine(ordenDetalle.Count);
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        var apellidoClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName);
        var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);

        nombre = nombreClaim?.Value ?? "Invitado";
        apellido = apellidoClaim?.Value ?? "Invitado";
        email = emailClaim?.Value ?? "Invitado";
    }  

    public async Task AbrirCulqi()
    {
        try
        {
            Console.WriteLine(nombre + apellido + email);

            int precioTotalEntero = MontoTotal * 100;

            var settings = new
            {
                title = "Realización de pago",
                currency = "PEN",
                amount = precioTotalEntero
            };

            var client = new
            {
                email = email,
                first_name = nombre,
                last_name = apellido,
                // phone_number = "900123456"
            };

            await JS.InvokeVoidAsync("AbrirCulqi", settings, client);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al intentar abrir Culqi: {ex.Message}");
        }
    }
}