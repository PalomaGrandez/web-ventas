@page "/usuario/confirmacion-compra/{montoTotal:int}"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
using Microsoft.JSInterop;

<PageTitle>Confirmación de Compra</PageTitle>

<div style="height:25px" />

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid Justify="Justify.Center">
        <MudItem lg="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold; font-family: 'Poppins', sans-serif">
                            COMPLETE SU COMPRA
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Style="font-family: 'Poppins', sans-serif;" Justify="Justify.Center">
                        <MudItem lg="12">
                            <MudText Typo="Typo.body1" Align="Align.Center">
                                Su pedido estará disponible para ser recogido a partir del día siguiente,
                                dentro de los días hábiles de lunes a sábado en el horario de 9 a.m. a 9 p.m.
                                La dirección de recogida es: <strong>Avenida San Martin 721, pasaje D-44, Pueblo Libre</strong>.
                                <br /><br />
                                Realice su pago con Yape y envíe el comprobante a soporte@fabrica.pe con el asunto: Pago Pedido N° xxxx-xx-xxxxxx. Verá sus productos en 'Mis Pedidos'.
                            </MudText>
                        </MudItem>
                        <MudItem lg="12">
                            <div class="d-flex justify-center">
                                <MudImage Height="300" ObjectPosition="ObjectPosition.Center" Src="pago/cod_aprobacion.png" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Fluid="true" Style="max-height:500px" />
                            </div>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.body2" Align="Align.Center" Style="font-size: 1.2rem; margin-top:20px;">
                                Pulse "Realizar pago" para completar la compra.
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>

                <MudCardActions Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Button"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Id="btn_pagar"
                               OnClick="AbrirCulqi"
                               StartIcon="@Icons.Material.Filled.ShoppingCart"
                               Style="font-weight:bold"
                               Class="mx-2">
                        Realizar Pago
                    </MudButton>

                    <!-- Nuevo botón para abrir el cuadro de diálogo -->
                    <MudButton ButtonType="ButtonType.Button"
                               Size="Size.Large"
                               Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="OpenDialogAsync"
                               StartIcon="@Icons.Material.Filled.Info"
                               Style="font-weight:bold"
                               Class="mx-2">
                        Información
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>



@code {
    [Parameter]
    public int MontoTotal { get; set; } // Parámetro para recibir el monto total
    public int eventoId { get; set; }
    private bool _cargandoEvento = false;
    private bool _cargandoEventoEntrada = false;
    private bool _cargandoEventoFecha = false;

    private bool _dialogOpen = false;

    private string btnText = "REALIZAR PEDIDO";
    private OrdenDetalleRegistroDto ordenRegistroDto = new();
    private List<OrdenDetalleRegistroDto> ordenDetalle = new();
    private OrdenRegistroDto orden = new();

    private bool _eventoSoloLectura = false;
    private bool _guardando = false;
    string user = "Invitado";
    string nombre = "Invitado";
    string email = "Invitado";
    string apellido = "Invitado";

    protected override async Task OnInitializedAsync()
    {
        await ValidarSesion();

        await CargarOrdenLocal();
    }

    private async Task CargarOrdenLocal()
    {
        ordenDetalle = await OrdenService.ObtenerOrdenDetalleLocal();
        Console.WriteLine(ordenDetalle.Count);
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var rolClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        var apellidoClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName);
        var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);

        nombre = nombreClaim?.Value ?? "Invitado";
        apellido = apellidoClaim?.Value;
        email = emailClaim?.Value;
        Console.WriteLine($"apellido inicializado: {apellidoClaim?.Value}"); // Registro de depuración
        Console.WriteLine($"apellido inicializado: {apellido}"); // Registro de depuración
        Console.WriteLine($"Nombre inicializado: {nombre}"); // Registro de depuración
    }  

    public Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false, // Desactiva el cierre con la tecla Escape
                DisableBackdropClick = true // Desactiva el cierre al hacer clic fuera del diálogo
            };
        // Muestra el diálogo
        return DialogService.ShowAsync<CustomDialog>(null, options);
    }

    public async Task RealizarPedido()
    {
        _guardando = true;

        var userId = await AuthService.GetUserId();

        if (!ordenDetalle.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("La orden debe contener al menos un ítem", Severity.Error);
            return;
        }

        orden.FechaOrden = DateTime.Now;
        orden.Estado = EstadosOrden.REGISTRADO;
        orden.Items = ordenDetalle;
        orden.UsuarioId = userId;
        orden.PrecioTotal = (decimal)ordenDetalle.Sum(x => x.Cantidad * x.PrecioRegular);

        var response = await OrdenService.CreateOrden(orden);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (response.Success)
        {
            await OrdenService.LimpiarItemLocal();
            _guardando = true;

            Snackbar.Add("Orden registrada exitosamente!", Severity.Success);
            NavigationManager.NavigateTo("/confirmacion-compra");
        }
        else
        {
            _guardando = true;
            Snackbar.Add($"Ha sucedido un error: {response.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Obtener el resultado del pago desde sessionStorage
            var pagoExitoso = await JS.InvokeAsync<string>("sessionStorage.getItem", "PagoExitoso");

            if (pagoExitoso == "true")
            {
                await RealizarPedido();
                await OpenDialogAsync();

                // Limpiar el valor en sessionStorage
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "PagoExitoso");
            }
            else if (pagoExitoso == "false")
            {
                // Manejar el caso de un pago fallido
                Console.WriteLine("El pago no fue exitoso.");
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "PagoExitoso");
            }
        }
    }

    [JSInvokable("OnPagoCompletado")]
    public async Task OnPagoCompletado()
    {
            await RealizarPedido();
            await OpenDialogAsync();   
    }

    public async Task AbrirCulqi()
    {
        try
        {
            Console.WriteLine(nombre + apellido + email);

            // Convertir el precio a entero (por ejemplo, a céntimos)
            int precioTotalEntero = MontoTotal * 100;

            var settings = new
            {
                title = "Realización de pago",
                currency = "PEN",
                amount = precioTotalEntero
            };

            var client = new
            {
                email = email,
                first_name = nombre,
                last_name = apellido,
                phone_number = "900123456"
            };

    
            // Llamar a la función de JavaScript para abrir el checkout de Culqi
            await JS.InvokeVoidAsync("AbrirCulqi", settings, client);

          
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al intentar abrir Culqi: {ex.Message}");
        }
    }

}