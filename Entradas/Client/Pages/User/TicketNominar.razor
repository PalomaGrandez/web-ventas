@page "/admin/ticket/ticket-nominar/{ordenTicketId:int}/{ordenId:int}"

@inject NavigationManager NavigationManager
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar

<PageTitle>@tituloPagina</PageTitle>
<div style="height:20px" />

<MudContainer MaxWidth="MaxWidth.Large">
    <EditForm Model="ordenTicketActualizarDto" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />

        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="12" lg="12">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@tituloPagina</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Justify="Justify.Center">
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudNumericField Label="Id"
                                                 ReadOnly="true"
                                                 @bind-Value="ordenTicketActualizarDto!.OrdenTicketId" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              ReadOnly="true"
                                              Label="Evento"
                                              @bind-Value="ordenTicketActualizarDto.Evento" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              ReadOnly="true"
                                              Label="Tipo Entrada"
                                              @bind-Value="ordenTicketActualizarDto.Tipo" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudDatePicker @bind-Date="ordenTicketActualizarDto.Fecha"
                                               DateFormat="dd/MM/yyyy"
                                               Label="Fecha Evento"
                                               ReadOnly="true" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              Label="Nombres"
                                              Placeholder="Ingrese los nombres"                                              
                                              @bind-Value="ordenTicketActualizarDto.Nombres" 
                                              For="@(() => ordenTicketActualizarDto.Nombres)" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              Label="Apellido Paterno"
                                              Placeholder="Ingrese el apellido paterno"
                                              @bind-Value="ordenTicketActualizarDto.ApellidoPaterno"
                                              For="@(() => ordenTicketActualizarDto.ApellidoPaterno)" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              Label="Apellido Materno"
                                              Placeholder="Ingrese el apellido materno"
                                              @bind-Value="ordenTicketActualizarDto.ApellidoMaterno"
                                              For="@(() => ordenTicketActualizarDto.ApellidoMaterno)" />
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudSelect T="string"
                                           Label="Tipo de Documento"
                                           AnchorOrigin="Origin.BottomCenter"
                                           Adornment="Adornment.Start"
                                           Placeholder="Seleccione el tipo de documento"
                                           Variant="Variant.Text"
                                           @bind-Value="@ordenTicketActualizarDto.TipoDocumento"
                                           For="@(() => ordenTicketActualizarDto.TipoDocumento)">
                                    <MudSelectItem Value="@("" )"></MudSelectItem>
                                    <MudSelectItem Value="@("DOCUMENTO DE IDENTIDAD" )"></MudSelectItem>
                                    <MudSelectItem Value="@("CARNET DE EXTRANJERIA" )"></MudSelectItem>
                                    <MudSelectItem Value="@("PASAPORTE" )"></MudSelectItem>
                                    <MudSelectItem Value="@("OTRO" )"></MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem lg="4" sm="6" md="4" xs="12">
                                <MudTextField T="string"
                                              Label="Numero de Documento"
                                              Placeholder="Ingrese el numero de documento"
                                              @bind-Value="ordenTicketActualizarDto.NumeroDocumento"
                                              For="@(() => ordenTicketActualizarDto.NumeroDocumento)" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudSpacer></MudSpacer>
                        <MudButton Disabled="@_guardando"
                                   Size="Size.Large"
                                   ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Class="ml-auto">
                            @if (_guardando)
                            {
                                <MudProgressCircular Class="ms-n1"
                                                     Size="Size.Small"
                                                     Indeterminate="true" />
                                <MudText Class="ms-2">Guardando</MudText>
                            }
                            else
                            {
                                <MudText>@btnText</MudText>
                            }
                        </MudButton>
                        <div style="width:20px" />
                        <MudButton ButtonType="ButtonType.Button"
                                   Size="Size.Large"
                                   Variant="Variant.Filled"
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Cancel"
                                   Class="ml-auto"
                                   OnClick="Cancelar">Cancelar</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>
@code {
    [Parameter]
    public int? ordenTicketId { get; set; }

    [Parameter]
    public int? ordenId { get; set; }

    private string tituloPagina = "Registrar Orden";
    string btnText = "REGISTRAR";

    private OrdenTicketActualizarDto ordenTicketActualizarDto = new();
    private bool _cargandoEstados = false;
    private bool _guardando = false;

    private string mensaje = string.Empty;


    protected override async Task OnParametersSetAsync()
    {
        btnText = ordenTicketId == null ? "REGISTRAR" : "NOMINAR";
        tituloPagina = ordenTicketId == null ? "Registrar Orden" : $"NOMINAR TICKET";
        //_eventoSoloLectura = Id == null ? false : true;
        mensaje = string.Empty;

        //Validar
        if (ordenTicketId != null)
        {
            var response = await OrdenService.GetOrdenTicketPorOrdenTicketId((int)ordenTicketId);

            if (!response.Success)
            {
                mensaje = response.Message;
            }
            else
            {
                var ordenTicketResponse = response.Data;

                ordenTicketActualizarDto.OrdenId = ordenTicketResponse!.OrdenId;
                ordenTicketActualizarDto.OrdenTicketId = ordenTicketResponse.OrdenTicketId;
                ordenTicketActualizarDto.Evento = ordenTicketResponse.Evento;
                ordenTicketActualizarDto.Tipo = ordenTicketResponse.Tipo;
                ordenTicketActualizarDto.Fecha = ordenTicketResponse.Fecha;
                ordenTicketActualizarDto.Nombres = ordenTicketResponse.Nombres.ToUpper();
                ordenTicketActualizarDto.ApellidoPaterno = ordenTicketResponse.ApellidoPaterno.ToUpper();
                ordenTicketActualizarDto.ApellidoMaterno = ordenTicketResponse.ApellidoMaterno.ToUpper();
                ordenTicketActualizarDto.TipoDocumento = ordenTicketResponse.TipoDocumento;
                ordenTicketActualizarDto.NumeroDocumento = ordenTicketResponse.NumeroDocumento;            
            }
        }
    }

    private async Task HandleRegistration()
    {
        // Establecer la bandera de guardado en true
        _guardando = true;

        // Verificar si el ID es nulo para determinar si es una nueva orden o una actualización
        if (ordenTicketId != null)
        {
            ordenTicketActualizarDto.Nombres = ordenTicketActualizarDto.Nombres.ToUpper();
            ordenTicketActualizarDto.ApellidoPaterno = ordenTicketActualizarDto.ApellidoPaterno.ToUpper();
            ordenTicketActualizarDto.ApellidoMaterno = ordenTicketActualizarDto.ApellidoMaterno.ToUpper();                                    

            // Actualizar la orden y obtener el resultado
            var result = await OrdenService.TicketNominar(ordenTicketActualizarDto);

            // Mostrar un mensaje de éxito o error según el resultado
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            if (result.Success)
            {
                Snackbar.Add($"{result.Message}", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Ha sucedido un error: {result.Message}", Severity.Error);
            }

            // Navegar a la lista de órdenes después de la actualización
            NavigationManager.NavigateTo($"/pedido-ticket/{ordenId}");            
        }

        // Restablecer la bandera de guardado a false después del proceso
        _guardando = false;
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo($"/pedido-ticket/{ordenId}");
    }
}
