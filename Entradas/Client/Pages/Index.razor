@page "/"

@inject NavigationManager NavigationManager
@inject IEventoService EventoService
@inject IBannerService BannerService

<PageTitle>Fabrica Entradas</PageTitle>

<MudCarousel ItemsSource="@BannerService.Banners"
             Style="height:450px; width:auto; display:block"
             ShowArrows="true" NextIcon="@Icons.Material.Filled.NavigateNext"
             ShowBullets="false" BulletsColor="Color.Info"
             EnableSwipeGesture="true"
             SelectedIndex="0"
             AutoCycle="true" Class="mud-width-full">
    <PreviousButtonTemplate>
        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
            <span class="mud-icon-button-label">
                <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.ArrowBackIos" Size="Size.Large" Color="@Color.Inherit" />
            </span>
        </div>
    </PreviousButtonTemplate>
    <NextButtonTemplate>
        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
            <span class="mud-icon-button-label">
                <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.ArrowForwardIos" Size="Size.Large" Color="@Color.Inherit" />
            </span>
        </div>
    </NextButtonTemplate>
    <ItemTemplate>
        <div class="d-flex flex-column flex-column justify-center" style="height:100%;background-image:url(@context.Imagen);background-size:cover;background-position:center">
            @* <MudImage onclick="@EventoDetalle" onmouseover="" Src="@context" Style="height:100%; cursor:pointer" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" />*@
        </div>
    </ItemTemplate>
</MudCarousel>
<div style="height:20px" />

<center>
    <MudText Typo="Typo.h4" Style="font-weight: bold; font-size: 2rem; font-family: 'Poppins', sans-serif;">PRODUCTOS DESTACADOS</MudText>
</center>

<div style="margin: 20px 10%; display: flex; justify-content: center; align-items: center; position: relative;">
    <MudAutocomplete T="Evento"
                     Value="selectedEvento"
                     ValueChanged="EventoSeleccionado"
                     Placeholder="Escribe para buscar..."
                     Variant="Variant.Outlined"
                     Class="mud-width-full mud-max-width-600 custom-text-field"
                     SearchFunc="BuscarEventos"
                     ToStringFunc="@(e => e.Nombre)"
                     MinCharacters="1" />
</div>

<style>
    .custom-text-field input::placeholder {
        color: rgba(255, 255, 255, 0.6); /* Color blanco opaco */
    }

    .custom-text-field .mud-input-outlined {
        border-color: rgba(255, 255, 255, 0.6); /* Color blanco opaco para los bordes */
    }

        .custom-text-field .mud-input-outlined:hover {
            border-color: rgba(255, 255, 255, 1); /* Color blanco completo al pasar el cursor */
        }

        .custom-text-field .mud-input-outlined:focus {
            border-color: rgba(255, 255, 255, 1); /* Color blanco completo al enfocar */
        }
</style>
<MudGrid Class="d-flex justify-center p-3">

    @if (filteredEventos.Count > 0)
    {
        @foreach (var evento in filteredEventos)
        {
            <MudItem xs="12" sm="6" lg="4" md="6" Class="d-flex justify-center">
                <MudCard Elevation="3" Style="border-radius: 15px; width: 100%; max-width: 450px; padding: 16px;">
                    <div style="display: flex; justify-content: center; align-items: center; background-color: #e8e8e8; height: 220px; border-radius: 8px;">
                        <img src="@evento.Imagen" style="max-width: 80%; max-height: 200px; object-fit: contain;" />
                    </div>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle2">@evento.Ubicacion</MudText>
                        <MudText Typo="Typo.h6" Style="font-weight: bold; font-size: 1.5rem; font-family: 'Poppins', sans-serif;">@evento.Nombre</MudText>
                    </MudCardContent>
                    <MudCardActions Class="justify-end">
                        <MudButton Style="margin-bottom: 15px; margin-right:10px"
                                   Variant="Variant.Outlined"
                                   ButtonType="ButtonType.Button"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Color="Color.Info"
                                   Class=" hover-scale"
                                   OnClick="()=>EventoDetalle(evento.EventoId)">Ver Producto</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="12" sm="12" lg="12">
            <div class="d-flex flex-column align-center">
                <MudPagination Variant="Variant.Filled" Size="Size.Large" Count="paginasTotales" SelectedChanged="@(async (pagina) => await PaginaSeleccionada(pagina))" Class="pa-4" />

            </div>
        </MudItem>
    }
    else if (_hayResultados)
    {
        <MudProgressCircular Indeterminate="true">
        </MudProgressCircular>
    }
    else
    {
        <MudItem xs="12" sm="12" lg="12">
            <div class="d-flex flex-column align-center">
                <MudText Typo="Typo.h5">No se encontraron resultados</MudText>
            </div>
        </MudItem>
    }
</MudGrid>
<style>
    .hover-scale {
        transition: transform 0.3s ease;
    }

        .hover-scale:hover {
            transform: scale(1.05);
        }
</style>

@code {
    private bool _cargandoPagina = true;

    private bool _cargando = false;
    private int paginasTotales;
    private int paginaActual;
    private bool _cargandoBanners;
    private string searchQuery = string.Empty;
    private bool _hayResultados = true;
    private List<Evento> filteredEventos = new List<Evento>();
    private Evento selectedEvento;

    private async Task<IEnumerable<Evento>> BuscarEventos(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return EventoService.Eventos;
        }

        return EventoService.Eventos
            .Where(e => e.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) || e.Ubicacion.Contains(value, StringComparison.OrdinalIgnoreCase));
    }



    protected override async Task OnInitializedAsync()
    {
        EventoService.OnChange += StateHasChanged; 
        await CargarBanners();
        await CargarEventos();
    }

    public void Dispose()
    {
        EventoService.OnChange -= StateHasChanged; 
    }

    private void EventoDetalle(int id)
    {
        NavigationManager.NavigateTo($"/producto-detalle/{id}");
    }

    private async Task CargarEventos(int pagina = 1)
    {
        _cargando = true;

        Console.WriteLine($"Cargando eventos para la página {pagina}");

        await EventoService.GetEventosPaginado(pagina);


        if (EventoService.Eventos.Count > 0)
        {
            Console.WriteLine($"Eventos cargados: {EventoService.Eventos.Count}");
        }
        else
        {
            Console.WriteLine("No se cargaron eventos.");
        }

        paginasTotales = EventoService.PaginasTotales;
        filteredEventos = EventoService.Eventos;
        _cargando = false;

        StateHasChanged();
    }





    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEventos = EventoService.Eventos;
        }
        else
        {
            filteredEventos = EventoService.Eventos
                .Where(e => e.Nombre.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || e.Ubicacion.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task CargarBanners()
    {
        _cargandoBanners = true;
        BannerService.OnChange += StateHasChanged;
        await BannerService.GetBanners();
        _cargandoBanners = false;
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        Console.WriteLine($"Cargando eventos para la página {pagina}");
        await CargarEventos(pagina);
    }


    private void EventoSeleccionado(Evento evento)
    {
        if (evento != null)
        {
            NavigationManager.NavigateTo($"/producto-detalle/{evento.EventoId}");
        }
    }

    private void SearchEventos()
    {
       
        PerformSearch().GetAwaiter().GetResult();
    }
}
