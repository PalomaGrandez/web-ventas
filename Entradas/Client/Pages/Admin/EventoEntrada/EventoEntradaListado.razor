@page "/admin/eventoentrada/evento-entrada-listado"

@inject NavigationManager NavigationManager
@inject IEventoEntradaService EventoEntradaService
@inject IEventoService EventoService
@inject ISnackbar Snackbar

<AuthorizeView Roles="Admin">
    <Authorized>

        <PageTitle>@tituloPagina</PageTitle>

        <div style="height:20px" />

        <MudContainer MaxWidth="MaxWidth.Large">
            <MudCard Elevation="3" Class="p-2 m-2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@tituloPagina</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Filled"
                                       Size="Size.Large"
                                       Color="Color.Success"
                                       Style="border-radius:20px"
                                       Title="Nueva Categoria"
                                       OnClick="Nuevo">
                        </MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.FlexStart">
                        <MudItem lg="6" sm="6" xs="12">
                            <MudSelect T="int" Label="Evento" Disabled="@_cargandoEventos" AnchorOrigin="Origin.BottomCenter" Value="@eventoId" Class="p-2" ValueChanged="((int id)=> EventoSeleccionado(id))"
                                       Adornment="Adornment.Start" Placeholder="Seleccione el evento" Variant="Variant.Outlined" HelperText="Seleccione el cliente">
                                <MudSelectItem Value="@(0)">TODOS</MudSelectItem>
                                @if (EventoService.Eventos.Count > 0)
                                {
                                    @foreach (var evento in EventoService.Eventos)
                                    {
                                        <MudSelectItem Value="@(evento.EventoId)">@evento.Nombre</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudTable Items="@EventoEntradaService.EventoEntradas" Context="eventoContext" Hover="true" Striped="true" Elevation="3" Loading="@_cargando" Breakpoint="Breakpoint.Sm" Dense="true" Class="p-2 m-2">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    @* <MudTh>EVENTO</MudTh> *@
                    <MudTh>TIPO</MudTh>
                    <MudTh>PRECIO REGULAR</MudTh>
                    <MudTh>PRECIO DESCUENTO</MudTh>
                    <MudTh>FECHA VIGENCIA DESCUENTO</MudTh>
                    <MudTh>CAPACIDAD</MudTh>
                    <MudTh>EDITAR</MudTh>
                    <MudTh>ELIMINAR</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@eventoContext.EventoEntradaId</MudTd>
                    @* <MudTd DataLabel="EVENTO">@context.EVE</MudTd> *@
                    <MudTd DataLabel="TIPO">@eventoContext.Tipo</MudTd>
                    <MudTd DataLabel="PRECIO REGULAR">@eventoContext.PrecioRegular</MudTd>
                    <MudTd DataLabel="PRECIO DESCUENTO">@eventoContext.PrecioDescuento</MudTd>
                    <MudTd DataLabel="FECHA VIGENCIA DESCUENTO">@eventoContext.FechaVigenciaDescuento</MudTd>
                    <MudTd DataLabel="CAPACIDAD">@eventoContext.Capacidad</MudTd>
                    <MudTd>
                        <MudFab Size="Size.Small"
                                StartIcon="@Icons.Material.Filled.Edit"
                                Color="Color.Info"
                                DisableElevation="true"
                                OnClick="()=> Actualizar(eventoContext.EventoEntradaId)">
                        </MudFab>
                    </MudTd>
                    <MudTd>
                        <MudFab Size="Size.Small"
                                StartIcon="@Icons.Material.Filled.Delete"
                                Color="Color.Error"
                                DisableElevation="true"
                                OnClick="()=> Eliminar(eventoContext.EventoEntradaId)">
                        </MudFab>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    @*<MudTablePager HideRowsPerPage="true" InfoFormat="@($"{infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" />*@
                    <div class="d-flex flex-column align-center">
                        <MudPagination Variant="Variant.Filled" Count="paginasTotales" SelectedChanged="PaginaSeleccionada" Class="pa-4" />
                    </div>
                </PagerContent>
            </MudTable>

        </MudContainer>

    </Authorized>
    <NotAuthorized>
        <PaginaNoAutorizada />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _cargando = true;
    private int paginaActual = 1;
    private int paginasTotales;
    private string tituloPagina = "Evento Entrada";

    private int eventoId;

    private bool _cargandoEventos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarEventos();
        await CargarEventoEntradas();

    }

    private void Nuevo()
    {
        NavigationManager.NavigateTo($"/admin/eventoentrada/evento-entrada-registro");
    }

    private void Actualizar(int id)
    {
        NavigationManager.NavigateTo($"/admin/eventoentrada/evento-entrada-registro/{id}");
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarEventoEntradas(pagina);
    }

    private async Task CargarEventoEntradas(int pagina = 1)
    {
        _cargando = true;
        EventoEntradaService.OnChange += StateHasChanged;
        await EventoEntradaService.GetEventoEntradasPaginado(pagina);
        paginasTotales = EventoEntradaService.PaginasTotales;
        _cargando = false;
    }

    private async Task CargarEventos()
    {
        _cargando = true;
        EventoEntradaService.OnChange += StateHasChanged;
        await EventoService.GetEventos();
        _cargando = false;
    }

    private async Task EventoSeleccionado(int id, int pagina = 1)
    {
        eventoId = id;
        _cargando = true;
        EventoEntradaService.OnChange += StateHasChanged;
        await EventoEntradaService.GetEventoEntradasPorEvento(pagina, eventoId);
        paginasTotales = EventoEntradaService.PaginasTotales;
        //registrosTotales = EventoEntradaService.RegistrosTotales;
        //mensaje = EventoEntradaService.Mensaje;
        _cargando = false;
    }
    private async Task Eliminar(int eventoEntradaId)
    {
        //EventoService.OnChange += StateHasChanged;
        var result = await EventoEntradaService.DeleteEvento(eventoEntradaId);

        //mensaje = result.Message;
        if (result.Success)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"Evento eliminado exitosamente!", Severity.Success);
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"Ha sucedido un error: {result.Message}", Severity.Error);
        }

        await CargarEventoEntradas();
    }
}
