@page "/admin/orden/orden-registro"
@page "/admin/orden/orden-registro/{Id:int}"

@inject NavigationManager NavigationManager
@inject IOrdenService OrdenService
@inject ISnackbar Snackbar


<AuthorizeView Roles="Admin">
    <Authorized>

        <PageTitle>@tituloPagina</PageTitle>
        <div style="height:20px" />

        <MudContainer MaxWidth="MaxWidth.Large">
            <EditForm Model="ordenActualizarDto" Context="formContext" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />

                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="12" lg="12">
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@tituloPagina</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid Justify="Justify.FlexStart">
                                    <MudItem lg="4" sm="4" xs="12">
                                        <MudDatePicker @bind-Date="ordenActualizarDto.FechaOrden"
                                                       DateFormat="dd/MM/yyyy"
                                                       Label="Fecha Orden"
                                                       ReadOnly="true" />
                                    </MudItem>
                                    <MudItem lg="4" sm="4" xs="12">
                                        <MudNumericField Label="Precio Total"
                                                         ReadOnly="true"
                                                         Format="F2"
                                                         Culture="CultureInfo.InvariantCulture"
                                                         @bind-Value="ordenActualizarDto!.PrecioTotal" />
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Justify="Justify.Center">
                                    <MudItem lg="4" sm="4" xs="12">
                                        <MudSelect T="string"
                                                   Label="Estado"
                                                   AnchorOrigin="Origin.BottomCenter"
                                                   @bind-Value="@ordenActualizarDto.Estado"
                                                   Adornment="Adornment.Start"
                                                   Placeholder="Seleccione el estado"
                                                   Variant="Variant.Text">
                                            <MudSelectItem Value="@("" )"></MudSelectItem>
                                            <MudSelectItem Value="@("REGISTRADO" )"></MudSelectItem>
                                            <MudSelectItem Value="@("PROCESANDO" )"></MudSelectItem>
                                            <MudSelectItem Value="@("RECHAZADO" )"></MudSelectItem>
                                            <MudSelectItem Value="@("ANULADO" )"></MudSelectItem>
                                            <MudSelectItem Value="@("APROBADO" )"></MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem lg="4" sm="4" xs="12">
                                        <MudSelect T="string"
                                                   Label="Medio de Pago"
                                                   Disabled="@_cargandoEstados"
                                                   AnchorOrigin="Origin.BottomCenter"
                                                   @bind-Value="@ordenActualizarDto.MedioPago"
                                                   Adornment="Adornment.Start"
                                                   Placeholder="Seleccione el medio de pago"
                                                   Variant="Variant.Text">
                                            <MudSelectItem Value="@("" )"></MudSelectItem>
                                            <MudSelectItem Value="@("YAPE" )">YAPE</MudSelectItem>
                                            <MudSelectItem Value="@("PLIN" )">PLIN</MudSelectItem>
                                            <MudSelectItem Value="@("TRANSFERENCIA" )">TRANSFERENCIA</MudSelectItem>
                                            <MudSelectItem Value="@("DEPOSITO" )">DEPOSITO</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem lg="4" sm="4" xs="12">
                                        <MudTextField T="string"
                                                      Label="Numero Operación"
                                                      Placeholder="Ingrese el numero de operación"
                                                      @bind-Value="ordenActualizarDto.NumeroOperacion" />
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudSpacer></MudSpacer>
                                <MudButton Disabled="@_guardando"
                                           Size="Size.Large"
                                           ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           Class="ml-auto">
                                    @if (_guardando)
                                    {
                                        <MudProgressCircular Class="ms-n1"
                                                             Size="Size.Small"
                                                             Indeterminate="true" />
                                        <MudText Class="ms-2">Guardando</MudText>
                                    }
                                    else
                                    {
                                        <MudText>@btnText</MudText>
                                    }
                                </MudButton>
                                <div style="width:20px" />
                                <MudButton ButtonType="ButtonType.Button"
                                           Size="Size.Large"
                                           Variant="Variant.Filled"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           Class="ml-auto"
                                           OnClick="Cancelar">Cancelar</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>


    </Authorized>
    <NotAuthorized>
        <PaginaNoAutorizada />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string tituloPagina = "Registrar Orden";
    string btnText = "REGISTRAR";

    private OrdenActualizarDto ordenActualizarDto = new();
    private Orden ordenModel = new();
    private bool _cargandoEstados = false;
    private bool _guardando = false;

    private string mensaje = string.Empty;


    protected override async Task OnParametersSetAsync()
    {
        btnText = Id == null ? "REGISTRAR" : "ACTUALIZAR";
        tituloPagina = Id == null ? "Registrar Orden" : $"Actualizar Orden";
        //_eventoSoloLectura = Id == null ? false : true;
        mensaje = string.Empty;

        //Validar
        if (Id != null)
        {
            var response = await OrdenService.GetOrdenPorId((int)Id);

            if (!response.Success)
            {
                mensaje = response.Message;
            }
            else
            {
                var ordenResponse = response.Data;

                Console.WriteLine($"OrdenId: {ordenResponse!.OrdenId}");
                ordenActualizarDto.OrdenId = ordenResponse!.OrdenId;
                ordenActualizarDto.FechaOrden = ordenResponse.FechaOrden;
                ordenActualizarDto.PrecioTotal = ordenResponse.PrecioTotal;
                ordenActualizarDto.Estado = ordenResponse.Estado;
                ordenActualizarDto.MedioPago = ordenResponse.MedioPago;
                ordenActualizarDto.NumeroOperacion = ordenResponse.NumeroOperacion;
            }
        }
    }

    private async Task HandleRegistration()
    {
        // Establecer la bandera de guardado en true
        _guardando = true;

        // Verificar si el ID es nulo para determinar si es una nueva orden o una actualización
        if (Id != null)
        {
            // Actualizar la orden y obtener el resultado
            var result = await OrdenService.UpdateOrden(ordenActualizarDto);

            // Mostrar un mensaje de éxito o error según el resultado
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            if (result.Success)
            {
                Snackbar.Add($"Orden actualizada exitosamente!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Ha sucedido un error: {result.Message}", Severity.Error);
            }

            // Navegar a la lista de órdenes después de la actualización
            NavigationManager.NavigateTo($"/admin/orden/orden-listado");
        }

        // Restablecer la bandera de guardado a false después del proceso
        _guardando = false;
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo($"/admin/orden/orden-listado");
    }
}