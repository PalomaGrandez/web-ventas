@page "/admin/eventofecha/evento-fecha-listado"

@inject NavigationManager NavigationManager
@inject IEventoService EventoService
@inject IEventoFechaService EventoFechaService
@inject ISnackbar Snackbar


<AuthorizeView Roles="Admin">
    <Authorized>
        <PageTitle>@tituloPagina</PageTitle>
        <div style="height:20px" />

        <MudContainer MaxWidth="MaxWidth.Large">
            <MudCard Elevation="3" Class="p-2 m-2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@tituloPagina</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Filled"
                                       Size="Size.Large"
                                       Color="Color.Success"
                                       Style="border-radius:20px"
                                       Title="Nueva Categoria"
                                       OnClick="Nuevo">
                        </MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.FlexStart">
                        <MudItem lg="6" sm="6" xs="12">
                            <MudSelect T="int" Label="Evento" Disabled="@_cargandoEventos" AnchorOrigin="Origin.BottomCenter" Value="@eventoId" Class="p-2" ValueChanged="((int id)=> EventoSeleccionado(id))"
                                       Adornment="Adornment.Start" Placeholder="Seleccione el cliente" Variant="Variant.Outlined" HelperText="Seleccione el cliente">
                                <MudSelectItem Value="@(0)">TODOS</MudSelectItem>
                                @if (EventoService.Eventos.Count > 0)
                                {
                                    @foreach (var evento in EventoService.Eventos)
                                    {
                                        <MudSelectItem Value="@(evento.EventoId)">@evento.Nombre</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudTable Items="@EventoFechaService.EventoFechas" Context="tableContext" Hover="true" Striped="true" Elevation="3" Loading="@_cargando" Breakpoint="Breakpoint.Sm" Dense="true" Class="p-2 m-2">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>FECHA</MudTh>
                    <MudTh>EDITAR</MudTh>
                    <MudTh>ELIMINAR</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@tableContext.EventoFechaId</MudTd>
                    <MudTd DataLabel="FECHA">@tableContext.Fecha</MudTd>
                    <MudTd><MudFab Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Info" DisableElevation="true" OnClick="()=> Actualizar(tableContext.EventoFechaId)"></MudFab></MudTd>
                    <MudTd><MudFab Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" DisableElevation="true" OnClick="()=> Eliminar(tableContext.EventoFechaId)"></MudFab></MudTd>
                </RowTemplate>
                <PagerContent>
                    @*<MudTablePager HideRowsPerPage="true" InfoFormat="@($"{infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" />*@
                    <div class="d-flex flex-column align-center">
                        <MudPagination Variant="Variant.Filled" Count="paginasTotales" SelectedChanged="PaginaSeleccionada" Class="pa-4" />
                    </div>
                </PagerContent>
            </MudTable>
        </MudContainer>

    </Authorized>
    <NotAuthorized>
        <PaginaNoAutorizada />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _cargando = true;
    private int paginaActual = 1;
    private int paginasTotales;
    private string tituloPagina = "Evento Fecha";
    private int eventoId = 0;
    private bool _cargandoEventos = false;


    protected override async Task OnInitializedAsync()
    {
        await CargarEventos();
        await CargarEventoFechas();

    }

    private void Nuevo()
    {
        NavigationManager.NavigateTo($"/admin/eventofecha/evento-fecha-registro");
    }
    private void Actualizar(int id)
    {
        NavigationManager.NavigateTo($"/admin/eventofecha/evento-fecha-registro/{id}");
    }

    private async Task CargarEventos()
    {
        _cargando = true;
        EventoService.OnChange += StateHasChanged;
        await EventoService.GetEventos();
        _cargando = false;
    }

    private async Task EventoSeleccionado(int id, int pagina = 1)
    {
        eventoId = id;
        _cargando = true;
        EventoFechaService.OnChange += StateHasChanged;
        await EventoFechaService.GetEventoFechasPorEvento(pagina, eventoId);
        paginasTotales = EventoService.PaginasTotales;
        _cargando = false;
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarEventoFechas(pagina);
    }
    private async Task CargarEventoFechas(int pagina = 1)
    {
        _cargando = true;
        EventoService.OnChange += StateHasChanged;
        await EventoFechaService.GetEventoFechasPorEvento(pagina, eventoId);
        paginasTotales = EventoService.PaginasTotales;
        _cargando = false;
    }
    private async Task Eliminar(int eventoFechaId)
    {
        //EventoService.OnChange += StateHasChanged;
        var result = await EventoFechaService.DeleteEventoFecha(eventoFechaId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (result.Success)
        {            
            Snackbar.Add($"Evento eliminado exitosamente!", Severity.Success);
        }
        else
        {            
            Snackbar.Add($"Ha sucedido un error: {result.Message}", Severity.Error);
        }

        await CargarEventoFechas();
    }
}
