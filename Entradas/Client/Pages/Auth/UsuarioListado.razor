@page "/admin/Usuario/usuario-listado"

@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
<AuthorizeView Roles="Admin">
    <Authorized>
        <PageTitle>@tituloPagina</PageTitle>

        <div style="height:20px" />
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudCard Elevation="3" Class="p-2 m-2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@tituloPagina</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @* <MudIconButton Icon="@Icons.Material.Filled.Add"
                        Variant="Variant.Filled"
                        Size="Size.Large"
                        Color="Color.Success"
                        Style="border-radius:20px"
                        Title="Nueva Categoria"
                        OnClick="Nuevo">
                        </MudIconButton> *@
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">

                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid Justify="Justify.FlexEnd">

                    </MudGrid>
                </MudCardActions>
            </MudCard>
            <MudDataGrid Items="@AuthService.Usuarios"
                         Filterable="false"
                         SortMode="@SortMode.None"
                         Groupable="false"
                         Class="p-3 m-1"
                         Elevation="3"
                         Hover="true"
                         Striped="true"
                         Dense="false"
                         Loading="_cargando"
                         LoadingProgressColor="Color.Primary"
                         Breakpoint="Breakpoint.Xs">
                <Columns>
                    <PropertyColumn Title="ID" Property="x => x.UsuarioId" />
                    <PropertyColumn Title="NOMBRES" Property="x => x.Nombres" />
                    <PropertyColumn Title="APELLIDO PATERNO" Property="x => x.ApellidoPaterno" />
                    <PropertyColumn Title="APELLIDO PATERNO" Property="x => x.ApellidoMaterno" />
                    <PropertyColumn Title="USUARIO" Property="x => x.NombreUsuario" />
                    <PropertyColumn Title="EMAIL" Property="x => x.Email" />
                    <PropertyColumn Title="FECHA CREACION" Property="x => x.FechaCreacion" />
                </Columns>
                <PagerContent>
                    @if (AuthService.PaginasTotales > 1)
                    {
                        <div class="d-flex flex-column align-center">
                            <MudPagination Variant="Variant.Filled" Count="paginasTotales" SelectedChanged="PaginaSeleccionada" Class="pa-4" />
                        </div>
                    }
                </PagerContent>
            </MudDataGrid>
        </MudContainer>

    </Authorized>
    <NotAuthorized>
        <PaginaNoAutorizada />
    </NotAuthorized>
</AuthorizeView>

@code {
    private string tituloPagina = "Usuarios";

    private bool paginarUsuarios = true;
    private bool _cargando = true;
    private int paginaActual = 1;
    private int paginasTotales;
    private List<UsuarioItemDto> usuariosListado = new();

    private bool autenticado;
    private string rol=string.Empty;

    protected override async Task OnInitializedAsync()
    {

        var isAuthenticated = await AuthService.IsUserAuthenticated();
        rol = await AuthService.GetUserRole();

        if (isAuthenticated && rol.Equals("Admin"))
        {
            await CargarUsuarios();
        }
        
    }
    private async Task CargarUsuarios(int pagina = 1)
    {
        _cargando = true;
        AuthService.OnChange += StateHasChanged;
        await AuthService.GetUsuarios(paginar: paginarUsuarios, pagina);
        paginasTotales = AuthService.PaginasTotales;
        _cargando = false;
    }
    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarUsuarios(pagina);
    }

    private void Inicio()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ValidarSesion()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var rolClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        var nombreClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);

        if (rolClaim != null && (rolClaim.Value.Equals("Admin") || rolClaim.Value.Equals("Customer")))
        {
            autenticado = true;
            rol = rolClaim.Value;
        }
        else
        {
            autenticado = false;
        }     
    }
}
