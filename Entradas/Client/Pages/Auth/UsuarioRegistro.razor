@page "/auth/usuario-registro"

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<PageTitle>Registro Usuario</PageTitle>
<div style="height:20px"></div>
<MudContainer MaxWidth="MaxWidth.Large">
    <EditForm Model="usuarioDto" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />

        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="6" lg="6">
                <MudCard Elevation="3">
                    <MudCardHeader Style="justify-content:center; text-align:center">
                        <CardHeaderContent>
                            <MudText Style="font-weight: bold; font-family: 'Poppins', sans-serif; font-size:1.5rem; width: 100%;" Typo="Typo.h6">Registro de Usuario Nuevo</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField Label="Nombres" HelperText="Ingrese los nombres"
                                      @bind-Value="usuarioDto!.Nombres" For="@(() => usuarioDto!.Nombres)" />
                        <MudTextField Label="Apellido Paterno" HelperText="Ingrese el apellido paterno"
                                      @bind-Value="usuarioDto!.ApellidoPaterno" For="@(() => usuarioDto!.ApellidoPaterno)" />
                        <MudTextField Label="Apellido Materno" HelperText="Ingrese el apellido materno"
                                      @bind-Value="usuarioDto!.ApellidoMaterno" For="@(() => usuarioDto!.ApellidoMaterno)" />
                        <MudTextField Label="Nombre de Usuario" HelperText="Ingrese el nombre de usuario"
                                      @bind-Value="usuarioDto!.NombreUsuario" For="@(() => usuarioDto!.NombreUsuario)" />
                        <MudTextField Label="Email" HelperText="Ingrese el email"
                                      @bind-Value="usuarioDto!.Email" For="@(() => usuarioDto!.Email)" />
                        <MudSelect Label="Tipo de Documento" HelperText="Seleccione Tipo de Documento"
                                   @bind-Value="usuarioDto.TipoDocumento">
                            @foreach (var tipo in tiposDocumentos)
                            {
                                <MudSelectItem Value="@tipo">@tipo</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField Label="Numero de Documento" HelperText="Ingrese su Numero de Documento"
                                      @bind-Value="usuarioDto!.NumeroDocumento" For="@(() => usuarioDto!.NumeroDocumento)" />
                        <MudTextField Label="Contraseña"
                                      HelperText="Ingrese la contraseña"
                                      InputType="@PasswordInput"
                                      AdornmentIcon="@PasswordInputIcon"
                                      Adornment="Adornment.End"
                                      OnAdornmentClick="ShowPassword"
                                      @bind-Value="usuarioDto!.Password"
                                      For="@(() => usuarioDto!.Password)" />
                        <MudTextField Label="Confirmar Contraseña"
                                      HelperText="Ingrese la confirmación de la contraseña"
                                      InputType="@PasswordInput"
                                      AdornmentIcon="@PasswordInputIcon"
                                      Adornment="Adornment.End"
                                      OnAdornmentClick="ShowPassword"
                                      @bind-Value="usuarioDto!.ConfirmPassword"
                                      For="@(() => usuarioDto!.ConfirmPassword)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSpacer />
                        <MudButton Disabled="@_guardando"
                                   ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Size="Size.Large"
                                   Class="ml-auto m-2">
                            @if (_guardando)
                            {
                                <MudProgressCircular Class="ms-n1"
                                                     Size="Size.Small"
                                                     Indeterminate="true" />
                                <MudText Class="ms-2">Guardando</MudText>
                            }
                            else
                            {
                                <MudText>@btnText</MudText>

                            }
                        </MudButton>
                        <MudButton ButtonType="ButtonType.Button"
                                   Variant="Variant.Filled"
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Cancel"
                                   Class="ml-auto m-2"
                                   OnClick="Cancelar"
                                   Size="Size.Large">Cancelar</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudContainer>
@code {
    UsuarioRegistroDto usuarioDto = new();

    string btnText = "REGISTRAR";

    string message = string.Empty;
    string messageCssClass = string.Empty;
    private bool _guardando = false;

    private async Task HandleRegistration()
    {
        _guardando = true;

        // Verificar si el email o nombre de usuario ya existen
        var emailExists = await AuthService.EmailExists(usuarioDto.Email);
        var usernameExists = await AuthService.UsernameExists(usuarioDto.NombreUsuario);

        if (emailExists)
        {
            Snackbar.Add("El email ya está en uso. Por favor, elija otro.", Severity.Warning);
            _guardando = false;
            return;
        }

        if (usernameExists)
        {
            Snackbar.Add("El nombre de usuario ya está en uso. Por favor, elija otro.", Severity.Warning);
            _guardando = false;
            return;
        }

        // Continuar con el registro si no existen duplicados
        var result = await AuthService.Registro(usuarioDto);

        if (result.Success)
        {
            Snackbar.Add("Usuario registrado exitosamente.", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }

        _guardando = false;
    }


    private List<string> tiposDocumentos = new List<string>
 {
     "DNI",
     "CE",
     "Pasaporte",
 };

    private void Cancelar()
    {
        NavigationManager.NavigateTo($"/");
    }
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
